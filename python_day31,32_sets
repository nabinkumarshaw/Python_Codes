sets = {1, 5, 7, 3, 5, 9, 1, 2}
print(sets)

#in set it cannot take the duplicacy value
#set is a unordered collection of data items

#if we want to print empty set then we have to wtrite like this

s = set()
print(type(s))

#Accesing the set element
s1 = {"maa", "papa", "bhai", "didi", 45, 'g', 89.90, "papa", 45}
for k in s1:
  print(k, " ")

#sets method

s1 = {1, 3, 5, 3, 7}
s2 = {3, 7, 4}
#1)Union
s3 = s1.union(s2)
print(s3)
#2)intersection
s4 = s1.intersection(s2)
print(s4)
#3)update
s5 = s1.update(s2)
print(s5)
# Symmetric difference
s1 = {1, 2, 3}
s2 = {2, 3, 4}
print(s1.symmetric_difference(s2))
#isdisjoint
print(s1.isdisjoint(s2))
#issuperset
print(s1.issuperset(s2))
#issubset
print(s1.issubset(s2))
#add
s1.add(100)
print(s1)
#update
print(s1.update({123,456,789}))
#remove== it throws an error if the element is not present that you pass to it
s1.remove(100)
print(s1)
#discard== it does not throw an error even if the element is not present that you pass to it
s1.discard(1000)
print(s1)
#pop
item =s1.pop()
print(item)
print(s1)
#del()== if we use del() then it will delete the entire set and if we want to print that set it will throw an name error
del (s1)
#print(s1)
#clear()== it will clear all element and return the empty set
s2.clear()
print(s2)


